<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PrepareMachine" Id="{248cfbe4-19da-4af2-bdf1-7508e9f08e1a}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PrepareMachine
VAR
	LED					: 		BOOL;				// LED which indicates the machine is on/off or not enough water
	Pod					: 		BOOL;				// Pod(s) placed
	BlinkInterval		:		BLINK;				// Interval time for indicating there is not enough water
	CupsChoosen			:		BOOL;				// Amount of cups is choosen (1 cup = 1 normal coffee, 2 cups = 2 espresso)
	WaterRefilled		: 		BOOL;				// Water in reservoir is refilled
	
	// STATES
	OFF 				: 		BOOL;				// Coffee machine is off
	Standby 			:		BOOL;				// Coffee machine in standy mode
  	WaterFilled 		: 		BOOL;				// Water in machine needs to be filled
   	PodPlaced 			: 		BOOL;				// Pod(s) needs to be placed
	Ready				:		BOOL;				// Preparation is ready
	State : CoffeeMachine := CoffeeMachine.OFF; 	// Current state
	
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Producing coffee by means of an senseo machine
// Name: Jurriën Arends
// Studentnumer: 515355
// Date: 6-11-2024
// Version: 0.8


// Task 1: Preparing machine
CASE State OF	
// STATE OFF
 CoffeeMachine.OFF:									
	IF GVL.Power = FALSE THEN						// IF no power, stay in this state
	  OFF:= TRUE;
	  Standby:= FALSE;
	  LED:= FALSE;
    END_IF
	
    IF GVL.Power = TRUE  THEN						// If power, go to state Standby
	  State:= CoffeeMachine.Standby;
	  OFF:= FALSE;
    END_IF
	
	IF WaterRefilled = TRUE THEN					// Cannot refill water in this state
		WaterRefilled:= FALSE;
	END_IF
  
 // STATE Standby 
 CoffeeMachine.Standby:								
  	IF GVL.Power = TRUE THEN						// If power, turn on LED
   	 	Standby:= TRUE;
	 	LED:= TRUE;
  	END_IF

	IF GVL.Power = FALSE  THEN						// If no power, go to state Off
	  	State:= CoffeeMachine.OFF;
	  	Standby:= FALSE;
	  	LED:= FALSE;
 	END_IF
	 
	IF GVL.WaterLevel <= 0  THEN					// If not enough water, call the function 'RefillWater' to refill the reservoir. Blink The LED to indicate this.
		BlinkInterval(ENABLE:= GVL.WaterLevel <=0, TIMELOW:= T#0.5S, TIMEHIGH:= T#0.5S, OUT=> LED);
		RefillWater(WaterRefilled);					// Read variable from function 'RefillWater'. If refilled go to state Waterfilled.
		Waterrefilled:= FALSE;
		CupsChoosen := FALSE;						// Cannot choose amount of cups in this state
	ELSIF GVL.WaterLevel > 0 THEN					// If enough water, go to state WaterFilled
		State:= CoffeeMachine.WaterFilled;
	 	Standby:= FALSE;
	  	LED:= FALSE;
	END_IF
	
 // State WaterFilled 	
 CoffeeMachine.WaterFilled:							
    IF GVL.WaterLevel > 0 THEN						// If enough water, LED doesn't blink
      	WaterFilled:= TRUE;
	  	LED:= TRUE;
  	END_IF
	
 	IF Pod = TRUE THEN								// If a pod is placed, go to state PodPlaced
	  	State:= CoffeeMachine.PodPlaced;
	  	WaterFilled:= FALSE;
	  	LED:= FALSE;
  	END_IF
	
	IF GVL.Power = FALSE  THEN						// If no power, go to state Off
	  	State:= CoffeeMachine.OFF;
	  	WaterFilled:= FALSE;
	  	LED:= FALSE;
 	END_IF
	
	IF WaterRefilled = TRUE THEN					// Cannot refill water in this state
		WaterRefilled:= FALSE;
	END_IF	 
	 	 
// State PodPlaced	
 CoffeeMachine.PodPlaced:							
    IF Pod = TRUE THEN								// Pod is placed
      	Podplaced:= TRUE;
	  	LED:= TRUE;
 	END_IF
	
	IF CupsChoosen = TRUE THEN						// If amount of cups is choosen, go to state Ready
	  	State:= CoffeeMachine.Ready;
	  	PodPlaced:= FALSE;
	  	LED:= TRUE;
	END_IF
		
	IF GVL.Power = FALSE  THEN						// IF no power, go to state Off
	  	State:= CoffeeMachine.OFF;
	  	PodPlaced:= FALSE;
	  	LED:= FALSE;
		Pod:= TRUE;
 	END_IF
	
	IF WaterRefilled = TRUE THEN					// Cannot refill water in this state
		WaterRefilled:= FALSE;
	END_IF
	 
// State Task ready	
 CoffeeMachine.Ready:								
    IF CupsChoosen = TRUE THEN						// If the machine is prepared, write a variable to task 'BrewCoffee' to start the process
      	Ready:= TRUE;
	  	LED:= TRUE;
	  	GVL.StartBrewing:= TRUE;
	  	Pod:= FALSE;
	  	CupsChoosen:= FALSE;
	END_IF
	
	IF GVL.Power = FALSE  THEN						// IF no power, go to state Off
	  	State:= CoffeeMachine.OFF;
	  	Ready:= FALSE;
	  	LED:= FALSE;
 	END_IF
	 
	IF GVL.CoffeeBrewed = TRUE THEN					// Read variable from task 'BrewCoffee'. If coffee is finished adjust the waterlevel
		State:= CoffeeMachine.Standby;
		Ready:= FALSE;
		LED:= FALSE;
		GVL.WaterLevel := GVL.WaterLevel - 1;
		GVL.CoffeeBrewed:= FALSE;
	END_IF
	 
	IF Pod = TRUE THEN								// Cannot place a pod when in Ready state
   		Pod:= FALSE;
	END_IF
	
	IF CupsChoosen = TRUE THEN						// Cannot choose amount of cups when in Ready state
   		CupsChoosen:= FALSE;
	END_IF
	 
	IF WaterRefilled = TRUE THEN					// Cannot refill water when in Ready state
		WaterRefilled:= FALSE;
	END_IF
	
ELSE
  OFF 			:= TRUE;
  Standby 		:= FALSE;
  WaterFilled 	:= FALSE;
  PodPlaced		:= FALSE;
  Ready			:= FALSE;
END_CASE; ]]></ST>
    </Implementation>
    <LineIds Name="PrepareMachine">
      <LineId Id="22" Count="4" />
      <LineId Id="32" Count="4" />
      <LineId Id="146" Count="0" />
      <LineId Id="38" Count="9" />
      <LineId Id="183" Count="0" />
      <LineId Id="309" Count="1" />
      <LineId Id="308" Count="0" />
      <LineId Id="48" Count="15" />
      <LineId Id="226" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="64" Count="4" />
      <LineId Id="225" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="72" Count="15" />
      <LineId Id="304" Count="0" />
      <LineId Id="306" Count="1" />
      <LineId Id="305" Count="0" />
      <LineId Id="89" Count="17" />
      <LineId Id="328" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="302" Count="1" />
      <LineId Id="301" Count="0" />
      <LineId Id="108" Count="5" />
      <LineId Id="281" Count="1" />
      <LineId Id="114" Count="7" />
      <LineId Id="128" Count="2" />
      <LineId Id="152" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="285" Count="3" />
      <LineId Id="131" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="292" Count="1" />
      <LineId Id="291" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="294" Count="3" />
      <LineId Id="122" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>